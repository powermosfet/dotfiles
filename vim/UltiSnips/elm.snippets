snippet doc "Function documentation"
{-| ${1:Documentation}
-}
endsnippet

snippet let "Let in" 
let
    ${1:name} = ${2:value}
in
endsnippet

snippet mod "Module declaration"
module ${1:`!p
dirs = path.replace(".elm", "").split("/")[::-1]
for dir in dirs:
    if dir[0].islower():
        break
    if snip.rv:
        snip.rv = dir + "." + snip.rv
    else:
        snip.rv = dir
`} exposing (${2:..})

$0
endsnippet

snippet none "Update response doing nothing"
( ${1:model}
, ${2:Effects.none}
)
endsnippet

snippet m "Update a field in the model"
{ ${1:model} | ${2:field} =  ${3:value} }
endsnippet

snippet c "Case expression with a single branch"
case ${1:result} of
    ${2:pattern} -> ${3:value}
endsnippet

snippet cr "Case expression for result type"
case ${1:result} of
    Ok ${2:_} -> ${3:value}
    Err ${4:_} -> ${5:value}
endsnippet

snippet dialogData "Default dialogData implementation"
{-| Converts dialog type to dialog config and content
-}
dialogData : Runtime.ServiceData tab invalidProperty -> Model -> Dialog -> Popup.DialogData Msg
dialogData { lang } _ dialog =
    case dialog of
        ${1:SomeDialog} ->
            Popup.confirmData
                { title = "Dialog title"
                , description = "Dialog description"
                , yesMsg = ${2:YesMsg}
                , yesText = Translation.commonYes lang
                , noMsg = ${3:CloseDialog}
                , noText = Translation.commonNo lang
                }
endsnippet

